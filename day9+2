排序
function ArrayList(){
	var array = [];
	this.insert = function(item){
		array.push(item);
	};
	this.toString = function(){
		return array.join();
	};
	
	//改进的冒泡排序
	this.BubbleSort = function(){
		var length = array.length;
		for(var i=0;i<length;i++){
			for(var j=0;j<length-1-i;j++){
				if(array[j]>array[j+1]){
					swap(j,j+1);
				}
			}
		}
	};
	var swap = function(index1,index2){
		var aux = array[index1];
		array[index1] = array[index2];
		array[index2] = aux;
	};
	//选择排序，选择最小的放在第一位，第二小在第二位，以此类推
	this.selectionSort = function(){
		var length = array.length,
			indexMin;
		for(var i=0;i<length-1;i++){
			indexMin = i;
			for(var j=i+1;j<length;j++){	//书中为j=i;我认为应为j=i+1；直接从下一位开始比较
				if(array[indexMin]>array[j]){
					indexMin = j;
				}
			}
			if(i !== indexMin){
				swap(i,indexMin);
			}
		}
	};
	//插入排序
	this.insertionSort = function(){
		var length = array.length,
			j,temp;
		for(var i=1;i<length;i++){
			j = i;
			temp = array[i];
			while(j>0 && array[j-1]>temp){
				array[j] = array[j-1];
				j--;
			}
			array[j] = temp;
		}
	};
	//归并排序，可实际使用。把数组切分成较小数组，直到每个小数组只有一个位置，接着将小数组归并成较大数组
	var mergeSort = function(array){
		array = mergeSortRec(array);
	};
	var mergeSortRec = function(array){
		var length = array.length;
		if(length === 1){
			return array;
		}
		var mid = Math.floor(length/2),
			left = array.slice(0,mid),
			right = array.slice(mid,length);
		return merge(mergeSortRec(left),mergeSortRec(right));
	};
	var merge = function(left,right){
		var result = [],
			il = 0,
			ir = 0;
		while(il<left.length && ir<right.length){
			if(left[il]<right[ir]){
				result.push(left[il++]);
			}else{
				result.push(right[ir++]);
			}
		}
		while(il<left.length){
			result.push(left[il++]);
		}
		while(ir<right.length){
			result.push(right[ir++]);
		}
		return result;
	};
	//快速排序
}
