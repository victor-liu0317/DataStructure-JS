树
二叉搜索树(BST)是二叉树的一种，但是它只允许你在左侧节点存储(比父节点)小的值，在右侧节点存储(比父节点)大(或等于)的值
function BinarySearchTree(){
	var Node = function(key){
		this.key = key;
		this.left = null;
		this.right = null;
	};
	var root = null;
	//向树插入一个新键的算法
	this.insert = function(key){
		var newNode = new Node(key);
		if(root === null){
			root = newNode;
		}else{
			insertNode(root,newNode);
		}
		
		var insertNode = function(node,newNode){
			if(newNode.key<node.key){
				if(node.left === null){
					node.left = newNode;
				}else{
					insertNode(node.left,newNode);	//递归
				}
			}else{
				if(node.right === null){
					node.right = newNode;
				}else{
					insertNode(node.right,newNode);	//递归
				}
			}
		};
	};
	//中序遍历，也就是从小到大的顺序访问所有节点。一种应用是对树进行排序操作
	this.inOrderTraverse = function(callback){	//接受一个回调函数作为参数，定义我们遍历到的每个节点进行的操作
		inOrderTraverseNode(root,callback);	
		var inOrderTraverseNode = function(node,callback){
			if(node !== null){
				inOrderTraverseNode(node.left,callback);
				callback(node.key);
				inOrderTraverseNode(node.right,callback);
			}
		};
	};
	//先序遍历。一个应用是打印一个结构化的文档
	this.preOrderTraverse = function(callback){
		preOrderTraverseNode(root,callback);
		var preOrderTraverseNode = function(node,callback){
			if(node !== null){
				callback(node.key);
				preOrderTraverseNode(node.left,callback);
				preOrderTraverseNode(node.right,callback);
			}
		};
	};
	//后序遍历。一个应用是计算一个目录和它的子目录中所有文件所占空间的大小
	this.postOrderTraverse = function(callback){
		postOrderTraverseNode(root,callback);
		var postOrderTraverseNode = function(node,callback){
			if(node !== null){
				postOrderTraverseNode(node.left,callback);
				postOrderTraverseNode(node.right,callback);
				callback(node.key);
			}
		};
	};
	//寻找树的最小值
	this.min = function(){
		return minNode(root);
	};
	var minNode = function(node){
		if(node){
			while(node && node.left !== null){
				node = node.left;
			}
			return node.key;
		}
		return null;
	};
	//寻找树的最大值
	this.max = function(){
		return maxNode(root);
	};
	var maxNode = function(node){
		if(node){
			while(node && node.right !== null){
				node = node.right;
			}
			return node.key;
		}
		return null;
	};
	//搜索特定值
	this.search = function(key){
		return searchNode(root,key);
	};
	var searchNode = function(node,key){
		if(node === null){
			return false;
		}
		if(key < node.key){
			return searchNode(node.left,key);
		}else if(key > node.key){
			return searchNode(node.right,key);
		}else{
			return true;
		}
	};
	//移除一个节点
	this.remove = function(key){
		root = removeNode(root,key);
	};
	var removeNode = function(node,key){
		if(node === null){
			return null;
		}
		if(key < node.key){
			node.left = removeNode(node.left,key);
			return node;
		}else if(key > node.key){
			node.right = removeNode(node.right,key);
			return node;
		}else{	//键等于node.key
			//一个叶节点
			if(node.left === null && node.right === null){
				node = null;
				return node;
			}
			//一个只有一个叶子节点的节点
			if(node.left === null){
				node = node.right;
				return node;
			}else if(node.right === null){
				node = node.left;
				return node;
			}
			//一个有两个子节点的节点
			var aux = finMinNode(node.right);
			node.key = aux.key;
			node.right = removeNode(node.right,aux.key);
			return node;
		}
	};
}
