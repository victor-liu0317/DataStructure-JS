双向链表
链接是双向的，一个链向下一个元素，另一个链向前一个元素
function DoubleLinkedList(){
	var Node = function(element){
		this.element = element;
		this.next = null;
		this.prev = null;
	};
	
	var length = 0;
	var	head = null;
	var tail = null;
	//向双向链表插入新项
	this.insert = function(position,element){
		if(position>=0 && position<=length){
			var node = new Node(element),
				current = head,
				previous,
				index = 0;
			if(position === 0){	//在第一个位置添加
				if(!head){
					head = node;
					tail = node;
				}else{
					node.next = current;
					current.prev = node;
					head = node;
				}
			}else if(position === length){	//最后一项
				current = tail;
				current.next = node;
				node.prev = current;
				tail = node;
			}else{
				while(index++ < position){
					previous = current;
					current = current.next;
				}
				node.next = current;
				current.prev = node;
				previous.next = node;
				node.prev = previous;
			}
			length++;
			return true;
		}else{
			return false;
		}
	};
	//从任意位置移除
	this.removeAt = function(position){
		if(position>-1 && position<length){
			var current = head,
				previous,
				index =0;
			//移除第一项
			if(position === 0){
				head = current.next;
				//如果只有一项
				if(length === 1){
					tail =null;
				}else{
					head.prev = null;
				}
			}else if(position === length-1){	//最后一项
				current = tail;
				tail = current.prev;
				tail.next =null;
			}else{
				while(index++ < position){
					previous = current;
					current = current.next;
				}
				//将previous与current的下一项链接起来，跳过current
				previous.next = current.next;
				current.next.prev = previous;
			}
			length--;
			return current.element;
		}else{
			return false;
		}
	};
}



循环链表
可以像链表一样只有单向引用，也可以像双向链表一样有双向引用。
唯一区别在于，最后一个元素指向下一个元素的指针(tail.next)不是null，而是head。
双向循环链表还有指向tail的head.prev。
