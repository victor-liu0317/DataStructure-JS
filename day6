集合
一组无序且唯一的项组成
使用了与有限集合相同的数学概念，但应用在计算机科学的数据结构中。
function Set(){
	var items = {};	//使用对象而不是数组
	//判断值是否在集合中
	this.has = function(value){
		return items.hasOwnProperty(value);
	};
	//添加新元素
	this.add = function(value){
		if(!this.has(value)){
			items[value] = value;	//把它同时作为键和值保存
			return true;
		}
		return false;
	};
	//删除
	this.remove = function(value){
		if(this.has(value)){
			delete items[value];
			return true;
		}
		return false;
	};
	//移除所有元素
	this.clear = function(){
		items = {};
	};
	//元素数量
	this.size = function(){
		return Object.keys(items).length;
	};
	//提取items对象所有属性，以数组形式返回
	this.values = function(){
		return Object.keys(items);
	};
	
	//集合操作
	//并集
	this.union = function(otherSet){
		var unionSet = new Set();
		var values = this.values();
		for(var i=0;i<values.length;i++){
			unionSet.add(values[i]);
		}
		values = otherSet.values();
		for(var i=0;i<values.length;i++){
			unionSet.add(values[i]);
		}
		return unionSet;
	};
	//交集
	this.intersection = function(otherSet){
		var intersectionSet = new Set();
		var values = this.values();
		for(var i=0;i<values.length;i++){
			if(otherSet.has(values[i])){
				intersectionSet.add(values[i]);
			}
		}
		return intersectionSet;
	};
	//差集
	this.difference = function(otherSet){
		var differenceSet = new Set();
		var values = this.values();
		for(var i=0;i<values.length;i++){
			if(!otherSet.has(values[i])){
				differenceSet.add(values[i]);
			}
		}
		return = differenceSet;
	};
	//子集
	this.subset = function(otherSet){
		if(this.size() > otherSet.size()){
			return false;
		}else{
			var values = this.values();
			for(var i=0;i<values.length;i++){
				if(!otherSet.has(values[i])){
					return false;
				}
			}
			return true;
		}
	};
}
